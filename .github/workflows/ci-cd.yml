name: AI Behar Platform CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check formatting with black
        run: black . --check --diff --exclude "/(\.git|\.hg|\.mypy_cache|\.venv|env|venv|\.env|node_modules)/"
        continue-on-error: true

      - name: Check imports with isort
        run: isort . --check --diff --profile black
        continue-on-error: true

  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov requests-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up test environment
        run: |
          mkdir -p ./logs
          cp config/monitoring_config.json.example config/monitoring_config.json || echo "No config to copy"
          python -m pytest --version

      - name: Run unit tests
        run: |
          python -m pytest tests/unit --cov=. --cov-report=xml -v

      - name: Run integration tests
        run: |
          python -m pytest tests/integration -v
        continue-on-error: true  # Integration tests may require external services

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: yourusername/ai-behar-platform
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set deployment variables
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          fi

      - name: Set up Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
        run: |
          # Ensure Railway CLI is available in PATH for this step
          export PATH="$HOME/.railway/bin:$PATH"

          # Link to the Railway project non-interactively if PROJECT_ID is provided
          if [[ -n "$RAILWAY_PROJECT_ID" ]]; then
            echo "Linking to Railway project $RAILWAY_PROJECT_ID"
            railway link --project $RAILWAY_PROJECT_ID
          else
            echo "RAILWAY_PROJECT_ID not set; relying on existing .railway link in repo or default context"
          fi

          # Optionally select environment by ID first (improves reliability over name matching)
          if [[ -n "$RAILWAY_ENVIRONMENT_ID" ]]; then
            echo "Selecting Railway environment ID $RAILWAY_ENVIRONMENT_ID"
            railway environment --set $RAILWAY_ENVIRONMENT_ID || true
          fi

          echo "Deploying to Railway environment: ${DEPLOY_ENV}"
          railway up --environment "${DEPLOY_ENV}" --detach

      - name: Verify deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        run: |
          set -e
          echo "Waiting for deployment to complete..."
          sleep 30

          # Try to detect a public domain via Railway CLI; fallback to conventional pattern
          export PATH="$HOME/.railway/bin:$PATH"
          DOMAIN=$(railway domain 2>/dev/null | head -n 1 || true)

          if [[ -n "$DOMAIN" ]]; then
            DEPLOY_URL="https://$DOMAIN"
          else
            # Fallback
            if [[ "${DEPLOY_ENV}" == "production" ]]; then
              DEPLOY_URL="https://ai-behar-production.up.railway.app"
            else
              DEPLOY_URL="https://ai-behar-${DEPLOY_ENV}.up.railway.app"
            fi
          fi

          echo "Checking health endpoint at $DEPLOY_URL/health"
          curl -f "$DEPLOY_URL/health" || (echo "Deployment verification failed" && exit 1)
          echo "Deployment successful!"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ needs.deploy.result == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: AI Behar Platform Deployment
          SLACK_MESSAGE: |
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Status: ${{ needs.deploy.result == 'success' && 'Success ✅' || 'Failed ❌' }}
            Triggered by: ${{ github.actor }}
            Commit: ${{ github.sha }}
        continue-on-error: true
